Task 2. Explore Cloud Shell
Cloud Shell provides you with command-line access to your cloud resources directly from your browser. With Cloud Shell, Cloud SDK command-line tools such as gcloud are always available, up to date, and fully authenticated.

Cloud Shell provides the following features and capabilities:

Temporary Compute Engine VM
Command-line access to the instance through a browser
5 GB of persistent disk storage ($HOME dir)
Preinstalled Cloud SDK and other tools
gcloud: for working with Compute Engine, Google Kubernetes Engine (GKE) and many GCP services
gsutil: for working with Cloud Storage
kubectl: for working with GKE and Kubernetes
bq: for working with BigQuery
Language support for Java, Go, Python, Node.js, PHP, and Ruby
Web preview functionality
Built-in authorization for access to resources and instances
After 1 hour of inactivity, the Cloud Shell instance is recycled. Only the /home directory persists. Any changes made to the system configuration, including environment variables, are lost between sessions.

In this task, you use Cloud Shell to create and examine some resources.

Open Cloud Shell and explore its features
On the GCP Console title bar, click Activate Cloud Shell (e92fcd01cbb5e0ff.png).
When prompted, click Continue.
Cloud Shell opens at the bottom of the GCP Console window.

The following icons are on the far right of Cloud Shell toolbar:

Hide/Restore: This icon hides and restores the window, giving you full access to the GCP Console without closing Cloud Shell.

Open in new window: Having Cloud Shell at the bottom of the GCP Console is useful when you are issuing individual commands. But when you edit files or want to see the full output of a command, clicking this icon displays Cloud Shell in a full-sized terminal window.

Close all tabs: This icon closes Cloud Shell. Everytime you close Cloud Shell, the virtual machine is recycled and all machine context is lost. However, data that you stored in your home directory is still available to you the next time you start Cloud Shell.

Use Cloud Shell to set up the environment variables for this task
In Cloud Shell, use the following commands to define the environment variables used in this task.

Replace [BUCKET_NAME] with the name of the first bucket from task 1.
Replace [BUCKET_NAME_2] with a globally unique name.
You can append a 2 to the globally unique bucket name that you used previously.

MY_BUCKET_NAME_1=[BUCKET_NAME]
MY_BUCKET_NAME_2=[BUCKET_NAME_2]
MY_REGION=us-central1

When you are working in the Cloud Shell or writing scripts, creating environment variables is a good practice. You can easily and consistently re-use these environment variables, which makes your work less error-prone.

Make sure you replace the full placeholder string, such as [BUCKET_NAME]with the unique name that you choose, for example MY_BUCKET_NAME_1=unique_bucket_name.

Move the credentials file you created earlier into Cloud Shell
You downloaded a JSON-encoded credentials file in an earlier task when you created your first Cloud IAM service account.

On your local workstation, locate the JSON key that you just downloaded and rename the file to credentials.json.

In Cloud Shell, click the three dots ( Three-dot menu icon) icon in the Cloud Shell toolbar to display further options.

Click Upload file and upload the credentials.json file from your local machine to the Cloud Shell VM.

Click the X icon to close the file upload pop-up window.

In Cloud Shell, type ls and press ENTER to confirm that the file was uploaded.

Create a second Cloud Storage bucket and verify it in the GCP Console
The gsutil command, which is supplied by the Cloud SDK, lets you work with Cloud Storage from the command line. In this task, you use the gsutil command in Cloud Shell.

In Cloud Shell, use the gsutil command to create a bucket.

gsutil mb gs://$MY_BUCKET_NAME_2

In the GCP Console, on the Navigation menu (Navigation menu), click Storage > Browser, or click Refresh if you are already in the Storage Browser.
The second bucket should appear in the Buckets list.

Use the gcloud command line to create a second virtual machine
In Cloud Shell, execute the following command to list all the zones in a given region:

gcloud compute zones list | grep $MY_REGION

Select a zone from the first column of the list. Notice that GCP zones' names consist of their region name, followed by a hyphen and a letter.
You may choose a zone that is the same as or different from the zone that you used for the first VM in task 1.

Execute the following command to store your chosen zone in an environment variable.
You replace [ZONE] with your selected zone.

MY_ZONE=[ZONE]

Set this zone to be your default zone by executing the following command.

gcloud config set compute/zone $MY_ZONE

Execute the following command to store a name in an environment variable you will use to create a VM. You will call your second VM second-vm.

MY_VMNAME=second-vm

Create a VM in the default zone that you set earlier in this task using the new environment variable to assign the VM name.

gcloud compute instances create $MY_VMNAME \
--machine-type "n1-standard-1" \
--image-project "debian-cloud" \
--image-family "debian-9" \
--subnet "default"

List the virtual machine instances in your project.

gcloud compute instances list

You will see both your newly created and your first virtual machine in the list.

In the GCP Console, on the Navigation menu ( Navigation menu), click Compute Engine > VM Instances. Just as in the output of gcloud compute instances list, you will see both of the virtual machines you created.

Look at the External IP column. Notice that the external IP address of the first VM you created is shown as a link. (If necessary, click the HIDE INFO PANEL button to reveal the External IP column.) The GCP Console offers the link because you configured this VM's firewall to allow HTTP traffic.

Click the link you found in your VM's External IP column. Your browser will present a Connection refused message in a new browser tab. This message occurs because, although there is a firewall port open for HTTP traffic to your VM, no Web server is running there. Close the browser tab you just created.

Use the gcloud command line to create a second service account
In Cloud Shell, execute the following command to create a new service account:

gcloud iam service-accounts create test-service-account2 --display-name "test-service-account2"

If you see the following output, type y and press ENTER:

Output (do not copy)

API [iam.googleapis.com] not enabled on project [560255523887]. Would
you like to enable and retry (this will take a few minutes)? (y/N)?

In the GCP Console, on the Navigation menu (Navigation menu), click IAM & admin > Service accounts.
Refresh the page till you see test-service-account2.

Click Check my progress to verify the objective.
Create a second bucket, VM instance and an IAM service account.

In Cloud Shell, execute the following command to grant the second service account the Project viewer role:

gcloud projects add-iam-policy-binding $GOOGLE_CLOUD_PROJECT --member serviceAccount:test-service-account2@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com --role roles/viewer

GOOGLE_CLOUD_PROJECT is an environment variable that is automatically populated in Cloud Shell and is set to the project ID of the current context.

In the GCP Console, on the Navigation menu (Navigation menu), click IAM & admin > IAM. select the new service account called test-service-account2.
On the right hand side of the page, click on pencil icon and expand the Viewer role.
You will see test-service-account2 listed as a member of the Viewer role.

Task 3. Work with Cloud Storage in Cloud Shell
Download a file to Cloud Shell and copy it to Cloud Storage
Copy a picture of a cat from a Google-provided Cloud Storage bucket to your Cloud Shell.

gsutil cp gs://cloud-training/ak8s/cat.jpg cat.jpg

Copy the file into one of the buckets that you created earlier.

gsutil cp cat.jpg gs://$MY_BUCKET_NAME_1

Copy the file from the first bucket into the second bucket:

gsutil cp gs://$MY_BUCKET_NAME_1/cat.jpg gs://$MY_BUCKET_NAME_2/cat.jpg

In the GCP Console, on the Navigation menu (Navigation menu), click Storage > Browser, select the buckets that you created, and verify that both contain the cat.jpg file.

Set the access control list for a Cloud Storage object
To get the default access list that's been assigned to cat.jpg (when you uploaded it to your Cloud Storage bucket), execute the following two commands:

gsutil acl get gs://$MY_BUCKET_NAME_1/cat.jpg  > acl.txt
cat acl.txt

The output should look like the following example, but with different numbers. This output shows that anyone with a Project Owner, Editor, or Viewer role for the project has access (Owner access for Owners/Editors and Reader access for Viewers).

Output (do not copy)

[
  {
    "entity": "project-owners-560255523887",
    "projectTeam": {
      "projectNumber": "560255523887",
      "team": "owners"
    },
gsutil cp gs://cloud-training/ak8s/cat.jpg cat.jpg    "role": "OWNER"
  },
  {
    "entity": "project-editors-560255523887",
    "projectTeam": {
      "projectNumber": "560255523887",
      "team": "editors"
    },
    "role": "OWNER"
  },
  {
    "entity": "project-viewers-560255523887",
    "projectTeam": {
      "projectNumber": "560255523887",
      "team": "viewers"
    },
    "role": "READER"
  },
  {
    "email": "google12345678_student@qwiklabs.net",
    "entity": "user-google12345678_student@qwiklabs.net",
    "role": "OWNER"
  }
]

To change the object to have private access, execute the following command:

gsutil acl set private gs://$MY_BUCKET_NAME_1/cat.jpg

To verify the new ACL that's been assigned to cat.jpg, execute the following two commands:

gsutil acl get gs://$MY_BUCKET_NAME_1/cat.jpg  > acl-2.txt
cat acl-2.txt

The output should look similar to the following example. Now only the original creator of the object (your lab account) has Owner access.

Output (do not copy)

[
  {
    "email": "google12345678_student@qwiklabs.net",
    "entity": "user-google12345678_student@qwiklabs.net",
    "role": "OWNER"
  }
]

Authenticate as a service account in Cloud Shell
In Cloud Shell, execute the following command to view the current configuration:

gcloud config list

You should see output that looks like the following example. In your output, the zone should be equal to the zone that you set when you created your second VM in task 2. The account and project should match your Qwiklabs lab credentials.

Output (do not copy)

[component_manager]
disable_update_check = True
[compute]
gce_metadata_read_timeout_sec = 5
zone = us-central1-a
[core]
account = google12345678_student@qwiklabs.net
disable_usage_reporting = False
project = qwiklabs-gcp-1aeffbc5d0acb416
[metrics]
environment = devshell

Your active configuration is: [cloudshell-16441]

In Cloud Shell, execute the following command to change the authenticated user to the first service account (which you created in an earlier task) through the credentials that you downloaded to your local machine and then uploaded into Cloud Shell (credentials.json).

gcloud auth activate-service-account --key-file credentials.json

Cloud Shell is now authenticated as test-service-account.

To verify the active account, execute the following command:

gcloud config list

You should see output that looks like the following example. The account is now set to the test-service-account service account.

Output (do not copy)

[component_manager]
disable_update_check = True
[compute]
gce_metadata_read_timeout_sec = 5
zone = us-central1-a
[core]
account = test-service-account@qwiklabs-gcp-1aeffbc5d0acb416.iam.gserviceaccount.com
disable_usage_reporting = False
project = qwiklabs-gcp-1aeffbc5d0acb416
[metrics]
environment = devshell

Your active configuration is: [cloudshell-16441]

To verify the list of authorized accounts in Cloud Shell, execute the following command:

gcloud auth list

You should see output that looks like the following example.

Output (do not copy)

                Credentialed Accounts
ACTIVE  ACCOUNT
        google12345678_student@qwiklabs.net
*       test-service-account@qwiklabs-gcp-1aeffbc5d0acb416.iam.gserviceaccount.com

To set the active account, run:
    $ gcloud config set account `ACCOUNT`

To verify that the current account (test-service-account) cannot access the cat.jpg file in the first bucket that you created, execute the following command:

gsutil cp gs://$MY_BUCKET_NAME_1/cat.jpg ./cat-copy.jpg

Because you restricted access to this file to the owner earlier in this task you should see output that looks like the following example.

Output (do not copy)

Copying gs://test-bucket-123/cat.jpg...
AccessDeniedException: 403  KiB]

Verify that the current account (test-service-account) can access the cat.jpg file in the second bucket that you created:

gsutil cp gs://$MY_BUCKET_NAME_2/cat.jpg ./cat-copy.jpg

Because access has not been restricted to this file you should see output that looks like the following example.

Output (do not copy)

Copying gs://test-bucket-123/cat.jpg...
- [1 files][ 81.7 KiB/ 81.7 KiB]
Operation completed over 1 objects/81.7 KiB.

To switch to the lab account, execute the following command.
You replace [USERNAME] with the username provided in the Qwiklabs Connection Details pane on the left of the lab instructions page. .

gcloud config set account [USERNAME]

To verify that you can access the cat.jpg file in the [BUCKET_NAME] bucket (the first bucket that you created), execute the following command.

gsutil cp gs://$MY_BUCKET_NAME_1/cat.jpg ./copy2-of-cat.jpg

You should see output that looks like the following example. The lab account created the bucket and object and remained an Owner when the object access control list (ACL) was converted to private, so the lab account can still access the object.

Output (do not copy)

Copying gs://test-bucket-123/cat.jpg...
- [1 files][ 81.7 KiB/ 81.7 KiB]
Operation completed over 1 objects/81.7 KiB.

Make the first Cloud Storage bucket readable by everyone, including unauthenticated users.

gsutil iam ch allUsers:objectViewer gs://$MY_BUCKET_NAME_1

This is an appropriate setting for hosting public website content in Cloud Storage.

In the GCP Console, on the Navigation menu (Navigation menu), click Storage > Browser, select the first storage bucket that you created. Notice that the cat.jpg file has a Public link. Copy this link.
Open an incognito browser tab and paste the link into its address bar. You will see a picture of a cat. Leave this browser tab open.